class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    void dfs(unordered_map<int,vector<int>> &mp,int u, vector<int> &result,
             vector<bool> &visited){
                 if(visited[u]==true)return;
                 visited[u]=true;
                 result.push_back(u);
                for(auto &v :mp[u]){
                    if(!visited[v]){
                         dfs(mp,v,result,visited);
                    }
                }
        
    }
    
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        unordered_map<int,vector<int>> mp;
        for(int  u = 0 ;u<V; u++){
             for(auto v = adj[u].begin();v!=adj[u].end();v++){
                   mp[u].push_back(*v);
             }
        
    }
             vector<int> result;
             vector<bool> visited(V,false);
             dfs(mp,0,result,visited);
             return result;
        }
    
};